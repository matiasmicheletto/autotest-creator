{"version":3,"sources":["app/custom/js/middleware.js","app/custom/js/middleware-db.js","app/custom/js/middleware-firestore.js","app/custom/js/app.js","app/controllers/home.js","app/controllers/autotest.js"],"names":["window","middleware","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","DEBUG","public","private","init","Promise","fulfill","reject","firebase","initializeApp","getStaticConfig","console","log","$","getJSON","err","getRemoteConfig","db","get","then","config","configTimestamp","Date","now","e","getTree","getStaticTree","result","query","snapshot","forEach","data","val","checkLocation","navigator","geolocation","getCurrentPosition","position","haversine","latlng1","latlng2","R","dLat","lat","Math","PI","dLon","lng","a","sin","cos","atan2","sqrt","userLatLng","coords","latitude","longitude","range","locationFilter","msg","listen","path","callback_success","callback_error","database","ref","on","key","error","listenChild","child","value","orderByChild","equalTo","stopListener","off","once","getSorted","getSortedLimited","limit","limitToLast","set","update","push","pushMultiple","dataArray","job","k","all","fs","add","collection","firestore","docRef","document","doc","getCollection","querySnapshot","getDocument","id","operator","theQuery","where","querySortedLimited","orderBy","queryMultipleLimited","keys","operators","values","col","app","angular","module","$routeProvider","when","templateUrl","controller","resolve","check","$rootScope","$location","testAllowed","filter","$sce","trustAsResourceUrl","run","f7","Framework7","root","name","showPreloader","message","preloader","dialog","hidePreloader","opened","close","closePanel","panel","getElementById","showDialog","title","buttons","create","text","destroyOnClose","open","toastSuccess","timeout","toast","closeTimeout","cssClass","toastError","userAllowed","firstTest","logData","$apply","$scope","localData","localStorage","getItem","userData","JSON","parse","resetCheck","checkForm","age","dni","tel","gender","setItem","stringify","allowAutotest","results","limits","max","elapsed","logLimit","length","lastTimestamp","timestamp","round","onClick","actionStack","tree","current","currentIndex","treeID","type","loadMenu","menuIndex","optIndex","from","to","by","toggleButton","index","options","checked","evalDecision","expr","gotoArray","split","parseInt","binArray","exit","code","exitCode","endTest","updAgeObj","FieldValue","increment","updGndrObj","updCodeObj","updPathObj","header","content","href","errorLog","errMsg","origin","err2"],"mappings":"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","file":"main-71dc66b178.js","sourcesContent":["window.middleware = (function () {\n\n    var firebaseConfig = { // Configuracion firebase\n        apiKey: \"AIzaSyDcBhhiu-dQXWaGBLcTEtnz8HPnelfXuA4\",\n        authDomain: \"covid19-autotest.firebaseapp.com\",\n        databaseURL: \"https://covid19-autotest.firebaseio.com\",\n        projectId: \"covid19-autotest\",\n        storageBucket: \"covid19-autotest.appspot.com\",\n        messagingSenderId: \"541298094681\",\n        appId: \"1:541298094681:web:a715a3322843f6ff7e7748\",\n        measurementId: \"G-0YZX1RVB1F\"\n    };\n\n    var DEBUG = true; // Version debugging\n\n    var public = {}; // Metodos y atributos publicos\n    var private = {}; // Metodos y atributos privados\n\n    public.init = function () { // Inicializacion del middleware. Descarga de configuracion\n        return new Promise(function (fulfill, reject) {\n            try {\n                firebase.initializeApp(firebaseConfig);\n                //firebase.analytics();\n\n                // Descarga de parametros de configuracion\n                // Se intenta descargar la configuracion de firebase (se usa un cache local por una hora)\n                // Si no se logra descargar la configuracion de firebase, se descarga una del server host\n\n                var getStaticConfig = function () { // Leer configuracion del server host\n                    if (DEBUG) console.log(\"Recurso de configuracion: hosting\");\n                    $.getJSON(\"custom/config.json\",\n                        fulfill, // Pasar directamente a la verificacion \n                        function (err) {\n                            return reject(err);\n                        }\n                    );\n                };\n\n                var getRemoteConfig = function () { // Leer configuracion de firebase o en caso de error traer del hosting\n                    public.db.get(\"config\") // Descargar configuracion de firebase\n                        .then(function (config) { // Callback\n                            if (config) { // Hay datos\n                                private.config = config; // Cachear la descarga\n                                private.configTimestamp = Date.now();\n                                if (DEBUG) console.log(\"Recurso de configuracion: DB\");\n                                fulfill(config) // Verificar\n                            } else // Si no hay datos, usar version statica\n                                getStaticConfig();\n                        })\n                        .catch(function (err) { // Ante error de consulta (puede ser por permisos)\n                            if (DEBUG) console.log(err);\n                            getStaticConfig(); // Tomar datos de la configuracion estatica\n                        });\n                };\n\n                if (!private.config) { // Si no hay ninguna configuracion guardada en variable\n                    getRemoteConfig(); // Intentar descargar de firebase\n                } else { // Si hay una guardada, verificar antiguedad\n                    if (Date.now() - private.configTimestamp < 3600000) { // Si paso menos de una hora de la ultima descarga, usar la que esta\n                        if (DEBUG) console.log(\"Recurso de configuracion: cache\");\n                        fulfill(private.config);\n                    } else { // Si tiene mas de una hora, intentar descargar una nueva\n                        getRemoteConfig();\n                    }\n                }\n            } catch (e) {\n                return reject(e);\n            }\n        });\n    };\n\n    public.getTree = function () { // Leer arbol de decision desde hosting\n        return new Promise(function (fulfill, reject) {\n\n            var getStaticTree = function () { // Descargar version de hosting\n                $.getJSON(\"custom/tree.json\", function (result) {\n                    if (DEBUG) console.log(result);\n                    return fulfill(result);\n                }, function (err) {\n                    return reject(err);\n                });\n            };\n\n            public.db.query(\"decisionTrees\", \"active\", true)\n                .then(function (snapshot) {\n                    snapshot.forEach(function (data) {\n                        if (DEBUG) console.log(data.val());\n                        return fulfill(data.val()); // Tomar el primero\n                    })\n                })\n                .catch(function (err) { // Ante error de consulta (puede ser por permisos)\n                    if (DEBUG) console.log(err);\n                    getStaticTree(); // Tomar datos del archivo de hosting\n                });\n        });\n    };\n\n    public.checkLocation = function (config) { // Obtener posiscion del cliente y comparar con filtro de configuracion\n        return new Promise(function (fulfill, reject) {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(function (position) {\n\n                    var haversine = function (latlng1, latlng2){  // Distancia en kilometros entre dos coordenadas\n                        // https://stackoverflow.com/questions/639695/how-to-convert-latitude-or-longitude-to-meters\n                        const R = 6378.137; // Radio de la tierra\n                        const dLat = latlng2.lat * Math.PI / 180 - latlng1.lat * Math.PI / 180;\n                        const dLon = latlng2.lng * Math.PI / 180 - latlng1.lng * Math.PI / 180;\n                        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                            Math.cos(latlng1.lat * Math.PI / 180) * Math.cos(latlng2.lat * Math.PI / 180) *\n                            Math.sin(dLon/2) * Math.sin(dLon/2);\n                        return (R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)));\n                    };\n\n                    // Determinar distancia al centro del area\n                    var userLatLng = {\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    };\n\n                    var range = haversine(config.locationFilter, userLatLng); // Distancia entre el usuario y el centro del area\n\n                    if (DEBUG) {\n                        console.log(\"Filtro: Lat.: \" + position.coords.latitude + \" -- Lng: \" + position.coords.longitude);\n                        console.log(\"Cliente: Lat: \" + config.locationFilter.lat + \" -- Lng: \" + config.locationFilter.lng);\n                        console.log(\"Distancia: \" + range);\n                    }\n\n                    if (range < config.locationFilter.range) // Si esta dentro de rango, retornar posicion del usuario\n                        return fulfill({\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        });\n                    else // Si no pertenece al area de analisis\n                        return reject({\n                            msg: \"Usuario fuera de area\"\n                        });\n                });\n            } else {\n                return reject({\n                    msg: \"No se pudo determinar ubicación.\"\n                });\n            }\n        });\n    };\n\n    return public;\n})();","(function (public) { // Extension de funciones middleware: realtime database\n\n    public.db = {}; // Metodos de realtime database\n\n    public.db.listen = function (path, callback_success, callback_error) { // Escuchar cambios\n        firebase.database().ref(path).on('value',\n            function (snapshot) {\n                callback_success(snapshot.val(), snapshot.key);\n            },\n            function (error) {\n                callback_error(error);\n            });\n    };\n\n    public.db.listenChild = function(path, child, value, callback_success, callback_error) { // Escucha cambios con filtro\n        firebase.database().ref(path).orderByChild(child).equalTo(value).on('child_added',\n            function (snapshot) {\n                callback_success(snapshot.val(), snapshot.key);\n            },\n            function (error) {\n                callback_error(error);\n            });\n    };\n\n    public.db.stopListener = function(path){ // Detener escuchador\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).off()\n                .then(function () {\n                    return fulfill();\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.get = function (path) { // Descargar tabla de la db\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).once('value')\n                .then(function (snapshot) {\n                    return fulfill(snapshot.val());\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.getSorted = function (path, key) { // Obtener lista ordenada por key\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).orderByChild(key).once('value')\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.getSortedLimited = function (path, key, limit) { // Obtener lista ordenada por key y con limite de entradas\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).orderByChild(key).limitToLast(limit).once('value')\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.query = function(path, key, value) { // Consulta por valor\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).orderByChild(key).equalTo(value).once('value')\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.set = function (data, path) { // Actualizar entrada de la db\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).set(data)\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.update = function (data, path) { // Actualizar entrada de la db\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).update(data)\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.push = function (data, path) { // Nueva entrada (retorna id)\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).push(data)\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.pushMultiple = function (dataArray, path) { // Subir multiples entradas a un mismo directorio\n        return new Promise(function (fulfill, reject) {\n            var job = [];\n            for (var k in dataArray) // Para cada objeto \n                job.push(firebase.database().ref(path).push(dataArray[k])); // TODO: usar multiples paths \n            Promise.all(job) // Ejecutar promise\n                .then(function (snapshot) { // Snapshot es un array que contiene los keys\n                    return fulfill(snapshot); // Del otro lado se puede hacer un for para retornar\n                })\n                .catch(function (error) { // Ver si retorna un solo error o varios\n                    return reject(error);\n                });\n        });\n    };\n\n})(middleware);","(function(public){ // Extension de funciones middleware: firestore\n\n    public.fs = {}; // Metodos de firestore\n\n    public.fs.add = function (data, collection) { // Agregar un documento a la collection\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).add(data)\n                .then(function (docRef) {\n                    return fulfill(docRef); // docRef.id tiene el id del document cargado\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.set = function (data, collection, document) { // Asignar objeto al document de una collection\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).doc(document).set(data)\n                .then(function () {\n                    return fulfill();\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.update = function(data, collection, document) { // Actualizar datos existentes\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).doc(document).update(data)\n                .then(function () {\n                    return fulfill();\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.delete = function(collection, document) { // Actualizar datos existentes\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).doc(document).delete()\n                .then(function () {\n                    return fulfill();\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.getCollection = function (collection) { // Descargar collection\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).get()\n                .then(function (querySnapshot) {\n                    return fulfill(querySnapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.getDocument = function(collection,document){\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).doc(document).get()\n                .then(function (querySnapshot) {\n                    var data = querySnapshot.data();\n                    data.key = querySnapshot.id;\n                    return fulfill(data);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n\n    ///// Consultas //////\n    // Los resultados retornan como arrays y las claves van como atributo \"key\" de cada elemento\n\n    public.fs.query = function (collection, key, operator, value, limit) { // Consulta por campos de documents\n        return new Promise(function (fulfill, reject) {\n            var result = [];\n            var theQuery;\n            if(limit)\n                theQuery = firebase.firestore().collection(collection).where(key, operator, value).limit(limit);\n            else\n                theQuery = firebase.firestore().collection(collection).where(key, operator, value);\n            \n            theQuery.get()\n                .then(function (querySnapshot) {\n                    querySnapshot.forEach(function (doc) {\n                        var data = doc.data();\n                        data.key = doc.id;\n                        result.push(data);\n                    });\n                    return fulfill(result);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.querySortedLimited = function (collection, key, operator, value, orderBy, limit) { // Consulta por campos de documents\n        return new Promise(function (fulfill, reject) {\n            var result = [];\n            firebase.firestore().collection(collection).where(key, operator, value).orderBy(orderBy, \"desc\").limit(limit).get()\n                .then(function (querySnapshot) {\n                    querySnapshot.forEach(function (doc) {\n                        var data = doc.data();\n                        data.key = doc.id;\n                        result.push(data);\n                    });\n                    return fulfill(result);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.queryMultipleLimited = function(collection, keys, operators, values, limit){\n        return new Promise(function (fulfill, reject) {\n            var result = [];\n            var col = firebase.firestore().collection(collection);\n            for(var k in keys) // Concatenar multiples filtros\n                col = col.where(keys[k], operators[k], values[k])\n            col.limit(limit).get()\n                .then(function (querySnapshot) {\n                    querySnapshot.forEach(function (doc) {\n                        var data = doc.data();\n                        data.key = doc.id;\n                        result.push(data);\n                    });\n                    return fulfill(result);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n    \n})(middleware)","var app = angular.module('autotest', ['ngRoute', 'ngSanitize'])\n    .config([\"$routeProvider\", function ($routeProvider) {\n        $routeProvider\n            .when(\"/\", {\n                templateUrl: \"views/home.html\",\n                controller: \"home\"\n            })\n            .when(\"/autotest\", {\n                templateUrl: \"views/autotest.html\",\n                controller: \"autotest\",\n                resolve: { // Verificar que el usuario puede realizar el autotest\n                    check: ['$rootScope', '$location', function ($rootScope, $location) {\n                        if ($rootScope.testAllowed)\n                            $location.path('/autotest');\n                        else\n                            $location.path('/');\n                    }]\n                }\n            })\n            .when(\"/about\", {\n                templateUrl: \"views/about.html\"\n            })\n            .when(\"/contact_us\", {\n                templateUrl: \"views/contact_us.html\"\n            });\n    }])\n    .filter('trusted', ['$sce', function ($sce) {\n        // Ver: https://stackoverflow.com/questions/39480969/angular-interpolateinterr-error-when-adding-url-from-variable\n        return $sce.trustAsResourceUrl;\n    }])\n    .run([\"$rootScope\", function ($rootScope) {\n\n        // Inicializacion y componentes de F7\n        var f7 = new Framework7({ // Libreria de estilos\n            root: '#app',\n            name: 'Autotest App',\n            id: 'com.autotest-creator.test',\n            angular: true\n        });\n\n        $rootScope.showPreloader = function (message) { // Muestra un preloader mientras carga algunas operaciones\n            $rootScope.preloader = f7.dialog.preloader(message, \"blue\");\n        };\n\n        $rootScope.hidePreloader = function () { // Oculta el preloader si estaba abierto\n            if ($rootScope.preloader.opened)\n                $rootScope.preloader.close();\n        };\n\n        $rootScope.closePanel = function () {\n            f7.panel.close(document.getElementById(\"panel-menu\"), true);\n        };\n\n        $rootScope.showDialog = function(title, message, buttons){ // Mostrar un dialogo de confirmacion\n            f7.dialog.create({\n                title: title,\n                text: message,\n                buttons: buttons,\n                destroyOnClose: true\n            }).open();\n        };\n\n        $rootScope.toastSuccess = function (message, timeout, position) {\n            f7.toast.create({\n                text: message,\n                position: position || \"bottom\",\n                closeTimeout: timeout || 2000,\n                destroyOnClose: true,\n                cssClass: \"toast-success\"\n            }).open();\n        };\n        \n        $rootScope.toastError = function (message, timeout, position) {\n            f7.toast.create({\n                text: message,\n                position: position || \"bottom\",\n                closeTimeout: timeout || 2000,\n                destroyOnClose: true,\n                cssClass: \"toast-error\"\n            }).open();\n        };\n\n        $rootScope.userAllowed = false; // Bloquea al usuario si no esta dentro del circulo de acceso\n        $rootScope.testAllowed = false; // Admite el uso del autotest\n        $rootScope.firstTest = false; // Indica si es el primer test que realiza esa persona con ese DNI\n        \n        // Iniciar servicios de backend y descargar config\n        $rootScope.showPreloader(\"Cargando...\")\n        middleware.init()\n            .then(function (config) {\n                console.log(config);\n                $rootScope.config = config;\n                $rootScope.hidePreloader();\n\n                // Verificar que el usuario esta dentro del circulo de uso de la app\n                $rootScope.logData = {}; // Objeto que se va a cargar a la base de datos al finalizar el test\n                $rootScope.showPreloader(\"Determinando ubicación...\");\n                middleware.checkLocation($rootScope.config) // Obtener ubicacion del usuario (tambien descarga y actualiza configuracion)\n                    .then(function (result) { // Usuario dentro del rango\n                        $rootScope.hidePreloader();\n                        \n                        // Registrar ubicacion del usuario\n                        $rootScope.logData.lat = result.lat;\n                        $rootScope.logData.lng = result.lng;\n            \n                        $rootScope.userAllowed = true; // Habilitar completar formulario\n            \n                        $rootScope.toastSuccess(\"Su ubicación pertenece al área de estudio.\");\n                        $rootScope.$apply();\n                    })\n                    .catch(function (err) { // Usuario fuera del rango\n                        console.log(err);\n                        $rootScope.hidePreloader();\n                        $rootScope.toastError(\"Su ubicación está fuera del área de estudio.\");\n                        $rootScope.$apply();\n                    });\n            })\n            .catch(function (err) {\n                console.log(err);\n            });\n    }]);","app.controller(\"home\", ['$scope', '$rootScope', function ($scope, $rootScope) {\n    \n    //console.log(\"home\");\n    $rootScope.testAllowed = false; // Admite el uso del autotest\n\n    // Intentar recuperar los datos guardados\n    var localData = localStorage.getItem('userData');\n    console.log(localData);\n    if(localData)\n        $scope.userData = JSON.parse(localData);\n    else\n        $scope.userData = {};\n\n  \n    $scope.resetCheck = function(){ // Reinicia el estado del checkeo\n        $rootScope.testAllowed = false; // No se puede poner en el ng-change porque es variable de $root\n    };\n\n    $scope.checkForm = function () { // Validacion de formulario\n\n        if(!$rootScope.testAllowed){ // Solo realizar el chequeo mientras el usuario no fue habilitado\n            //console.log($scope.userData);\n\n            if (!$scope.userData) {\n                $rootScope.toastError(\"Debe completar su nombre\");\n                return;\n            }\n\n            if (!$scope.userData.name) {\n                $rootScope.toastError(\"Debe completar su nombre\");\n                return;\n            }\n\n            if (!$scope.userData.age) {\n                $rootScope.toastError(\"Por favor, indique su edad\");\n                return;\n            }\n\n            if (!$scope.userData.dni) {\n                $rootScope.toastError(\"Debe completar su DNI\");\n                return;\n            } else {\n                if ($scope.userData.dni < 100000) {\n                    $rootScope.toastError(\"Su DNI no parece un número válido\");\n                    return;\n                }\n            }\n\n            if (!$scope.userData.tel) {\n                $rootScope.toastError(\"Por favor, indique un teléfono\");\n                return;\n            }\n\n            if (!$scope.userData.gender) {\n                $rootScope.toastError(\"Debe indicar su género\");\n                return;\n            }\n\n            // Guardar formulario para que no tenga que recompletar\n            localStorage.setItem(\"userData\", JSON.stringify($scope.userData));\n\n            /* \n            * Si llega hasta aca, completo todos los datos. Verificar si ya cargo un test\n            * Si ya cargo, preguntar si desea modificar su respuesta con la opcion de salir o proceder.\n            * Puede cargar hasta 3 respuestas diferentes (?)\n            * Sino, pasar directamente al autotest\n            */\n\n            var allowAutotest = function(){ // Callback para dar el ok de iniciar el autotest\n                for(var k in $scope.userData) // Guardar los datos de usuario en objeto a registrar en DB\n                    $scope.logData[k] = $scope.userData[k];\n                $rootScope.testAllowed = true; // Habilitar usuario a realizar el test\n                $rootScope.toastSuccess(\"Habilitado para iniciar el autotest\", 1500, \"center\");\n                $rootScope.$apply();\n            };\n\n            $rootScope.showPreloader(\"Verificando datos...\");\n            middleware.fs.query(\"results\", \"dni\", \"==\", $scope.userData.dni)\n            .then(function(results){\n                $rootScope.hidePreloader();\n                // Definir valores por defecto en caso de que la base de datos no traiga nada\n                var limits = {\n                    max: 3,\n                    elapsed: 86400000\n                };\n                if($rootScope.config)\n                    if($rootScope.config.logLimit)\n                        limits = { \n                            max: $rootScope.config.logLimit.max,\n                            elapsed: $rootScope.config.logLimit.elapsed\n                        };\n                if(results.length >= limits.max){ // Ya hay [max] registros guardados, no puede cargar mas\n                    $rootScope.showDialog(\"Límite de resultados\",\n                        \"El DNI indicado ya alcanzó el límite de \"+limits.max+\" autotests diferentes.\",\n                        [{text:\"Aceptar\"}]\n                    );\n                }else{\n                    if(results.length == 0){ // Si no hay resultados guardados para este dni, iniciar\n                        $rootScope.firstTest = true; // Testigo para habilitar contadores de estadistica\n                        allowAutotest();\n                    }else{ // Si hay entre 0 y 3 resultados, revisar fecha del ultimo\n                        // Obtener maximo\n                        var lastTimestamp = 0;\n                        for(var k in results){\n                            if(results[k].timestamp > lastTimestamp)\n                                lastTimestamp = results[k].timestamp;\n                        }\n                        if(Date.now() - lastTimestamp < limits.elapsed){\n                            $rootScope.showDialog(\"Límite de resultados\",\n                                \"Debe transcurrir \"+Math.round($rootScope.config.logLimit.elapsed/3600000)+\"hs. desde la última vez que realizó el autotest para realizar uno nuevo.\",\n                                [{text:\"Aceptar\"}]\n                            );\n                        }else{\n                            $rootScope.showDialog(\"Se encontraron registros\",\n                                \"El DNI indicado ya registró <b>\"+results.length+\"</b> resultado/s. Puede realizar un máximo de \"+$rootScope.config.logLimit.max+\".\",\n                                [{\n                                    text: \"Aceptar\",\n                                    onClick: function() {\n                                        allowAutotest();\n                                    }\n                                }]\n                            );\n                        }\n                    }\n                }\n            })\n            .catch(function (err) { \n                console.log(err);\n                $rootScope.hidePreloader();\n                $rootScope.$apply();\n            });\n        }\n    };\n}]);","app.controller(\"autotest\", ['$scope', '$rootScope', function ($scope, $rootScope) {\n    \n    //console.log(\"autotest\");\n    \n    $rootScope.showPreloader(\"Obteniendo datos...\");\n    \n    $rootScope.logData.actionStack = []; // Registro de interacciones del usuario\n    \n    middleware.getTree() // Descargar config con diagrama de flujo\n    .then(function(config){\n        $rootScope.hidePreloader();\n\n        $scope.tree = config.tree;\n        $scope.current = config.tree[0]; // Menu actual\n        $scope.currentIndex = 0; // Indice actual\n        $rootScope.logData.treeID = config.id; // Guardar el id del arbol\n        $rootScope.logData.actionStack.push({ // Registrar inicio de autotest\n            type: \"start\",\n            timestamp: Date.now()\n        });\n\n        $rootScope.$apply();\n    })\n    .catch(function(err){\n        console.log(err);\n    });\n\n    $scope.loadMenu = function (menuIndex, optIndex) { // Callback de botones con enlace a sgte nodo\n        if(menuIndex > 0){ // Pasar a la siguiente vista\n            if ($scope.tree[menuIndex]){ // Control\n                $rootScope.logData.actionStack.push({\n                    type: \"loadMenu\", // Tipo de accion\n                    from: $scope.currentIndex, // Desde que menu\n                    to: menuIndex, // Hacia que menu\n                    by: optIndex, // Por cual opcion. (goto->opt[index], decision->dec[index])\n                    timestamp: Date.now()\n                });\n                $scope.current = $scope.tree[menuIndex];\n                $scope.currentIndex = menuIndex;\n            }\n        }\n    };\n\n    $scope.toggleButton = function(index){ // Alterna estado de selectores\n        if(!$scope.current.options[index].checked) // La primera vez es undefined\n            $scope.current.options[index].checked = true;\n        else\n            $scope.current.options[index].checked = false;\n    };\n\n    $scope.evalDecision = function(expr){ // Evalua los toggle seleccionados y decide a cual nodo ir\n\n        // Convertir expresion logica en array (si, cada vez)\n        var gotoArray = expr.split(',');\n        for(var k in gotoArray)\n            gotoArray[k] = parseInt(gotoArray[k]);\n\n        // Generar valor binario de las opciones elegidas\n        var binArray = \"\";\n        for(var k in $scope.current.options)\n            if($scope.current.options[k].type==\"toggle\")\n                binArray = binArray+($scope.current.options[k].checked ? \"1\":\"0\");\n\n        var index = parseInt(binArray,2); // Valor decimal del numero de caso\n\n        $scope.loadMenu(gotoArray[index], index); // Ir al menu correspondiente\n    };\n\n    $scope.exit = function(code){ // Finalizacion del test\n        $rootScope.logData.exitCode = code;\n        $scope.endTest();\n    };\n\n    $scope.endTest = function(){ // Callback de finalizacion del test\n        $rootScope.logData.timestamp = Date.now(); // Estampa de tiempo de realizacion\n        \n        $rootScope.showPreloader(\"Enviando resultados...\");\n\n        // Incrementar contadores para estadistica \n        if($rootScope.firstTest){ // Para los datos que no cambian (edad, genero) se cuenta la primera vez\n            // Para histograma de edades\n            var age = $rootScope.logData.age;\n            var updAgeObj = {}; // Objeto de actualizacion\n            updAgeObj[\"range_\"+((age - age % 10)/10)] = firebase.firestore.FieldValue.increment(1); // incrementador de rango (range_0, range_1, ...)\n            middleware.fs.update(updAgeObj,\"stats\",\"ages\");\n\n            // Para porcentajes de sexo\n            var updGndrObj = {}; // Objeto de actualizacion\n            updGndrObj[$rootScope.logData.gender] = firebase.firestore.FieldValue.increment(1);\n            middleware.fs.update(updGndrObj,\"stats\",\"genders\");\n        }\n\n        // Para contadores de resultado final\n        var updCodeObj = {}; // Objeto de actualizacion\n        updCodeObj[$rootScope.logData.exitCode] = firebase.firestore.FieldValue.increment(1);\n        middleware.fs.update(updCodeObj,\"stats\",\"exitCodes\");\n\n        // Para contadores de caminos recorridos\n        var updPathObj = {}; // Contadores de caminos para cada arbol\n        for(var k = 1; k < $rootScope.logData.actionStack.length; k++){ // Para cada evento de usuario\n            if($rootScope.logData.actionStack[k].type==\"loadMenu\"){ // Tipo de accion es cambio de menu\n                var path = \"P_\"+$rootScope.logData.actionStack[k].from+\"_\"+$rootScope.logData.actionStack[k].to+\"_\"+$rootScope.logData.actionStack[k].by;\n                updPathObj[path] = firebase.firestore.FieldValue.increment(1);\n            }\n            \n        }\n        middleware.fs.update(updPathObj,\"pathStats\",$rootScope.logData.treeID);\n\n        // Registrar objeto de resultado\n        middleware.fs.add($rootScope.logData, \"results\")\n            .then(function(){\n                // Fijar un mensaje\n                $scope.current = {\n                    header: \"Gracias por completar el test\",\n                    content: \"Si desea actualizar sus respuestas, puede repetir el test dentro de \"+Math.round($rootScope.config.logLimit.elapsed/3600000)+\" horas.\",\n                    options:[\n                        {\n                            type:\"link\",\n                            text:\"Menú principal\",\n                            href:\"#!/\"\n                        }\n                    ]\n                };\n                $rootScope.hidePreloader();\n                $scope.$apply();\n            })\n            .catch(function(err){ // Si hay error en la carga del resultado, registrar problema en db\n                console.log(err);\n                // Indicar al usuario del error ocurrido\n                $scope.current = {\n                    header: \"El resultado no pudo registrarse\",\n                    content: \"Hemos enviado datos del problema para tabajar en la solución. Vuelva a intentarlo más tarde.\",\n                    options:[\n                        {\n                            text:\"Menú principal\",\n                            href:\"#!/\"\n                        }\n                    ]\n                };\n                var errorLog = {\n                    errMsg: JSON.stringify(err),\n                    timestamp: Date.now(),\n                    origin: \"autotest.js/$scope.endTest\"\n                };\n                middleware.fs.add(errorLog, \"errorLogs\")\n                    .then(function(){\n                        $rootScope.hidePreloader();\n                        $scope.$apply();\n                    })\n                    .catch(function(err2){ // Error en el registro de error ya es demasiado\n                        console.log(err2);\n                        $rootScope.hidePreloader();\n                        $scope.$apply();\n                    });\n            });\n    };\n}]);"],"sourceRoot":"/source/"}