{"version":3,"sources":["admin/custom/js/middleware.js","admin/custom/js/middleware-users.js","admin/custom/js/middleware-db.js","admin/custom/js/middleware-firestore.js","admin/custom/js/init.js","admin/controllers/login.js","admin/controllers/dashboard.js","admin/controllers/config.js"],"names":["window","middleware","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","public","init","Promise","fulfill","reject","firebase","initializeApp","auth","onAuthStateChanged","user","users","onUserSignedIn","uid","onUserSignedOut","e","console","log","signIn","form","signInWithEmailAndPassword","email","password","error","errorMessage","errorCode","code","then","result","signOut","signUp","createUserWithEmailAndPassword","fullfill","resetPwd","sendPasswordResetEmail","db","listen","path","callback_success","callback_error","database","ref","on","snapshot","val","key","listenChild","child","value","orderByChild","equalTo","stopListener","off","get","once","getSorted","getSortedLimited","limit","limitToLast","query","set","data","update","push","pushMultiple","dataArray","job","k","all","fs","add","collection","firestore","docRef","document","doc","getCollection","querySnapshot","getDocument","id","operator","theQuery","where","forEach","querySortedLimited","orderBy","queryMultipleLimited","keys","operators","values","col","app","angular","module","run","$rootScope","$location","userLogged","loading","configData","config","trees","tree","t","$apply","err2","toastr","$scope","err","logout","getTime","stamp","format","time","Date","now","moment","fromNow","html2Text","content","temp","createElement","innerHTML","textContent","innerText","generateID","n","Math","random","toString","substr","showHelp","helpContent","$","modal","$routeProvider","when","templateUrl","controller","filter","$sce","trustAsResourceUrl","login","res","success","retrievePassword","info","updateAgePlot","labels","colors","grIncr","floor","Object","getOwnPropertyNames","stats","ages","length","gray","startAge","parseInt","split","endAge","agesChart","destroy","Chart","getElementById","type","datasets","label","backgroundColor","options","maintainAspectRatio","scales","yAxes","display","ticks","beginAtZero","updateGenderPlot","genderChart","pointRadius","genders","m","f","updaterResultPlot","exitCodes","exitCodeChart","updatePathsPlot","treeData","find","el","active","weights","maxWeight","pathStats","p","from","to","index","nodes","edges","nodeTitle","header","substring","shape","font","size","color","face","j","w","lbl","text","smooth","roundness","round","newId","l","decision","rndss","rndIncr","padd","ind","padStart","exitCode","vis","DataSet","layout","hierarchical","direction","sortMethod","physics","align","arrows","enabled","scaleFactor","Network","updateStats","snapshot2","map","L","center","locationFilter","lat","lng","zoom","tileLayer","accessToken","addTo","latlng","newLocation","range","tempConfig","setupMap","current_location","marker","radius","circle","markerGroup","clearLayers","layerGroup","bindPopup","openPopup","updateLocationFilter","copy","updateTreePlot","padding","newTree","author","currentUser","timestamp","editable","validated","copyTree","deleteTree","deleted","setActiveTree","editTree","editingIndex","cancelEdition","validateTree","toggleCntr","exprs","exprLen","pow","status","goToNode","exit","nodeList","message","testInDevice","activeIndex","findIndex","current","loadMenu","toggleButton","checked","evalDecision","expr","gotoArray","binArray","saveConfig","forUpdate","forPush","indexList","deleteJob","logLimit","err4","err3","resetConfig","elapsedHours","elapsed","updateElapsed"],"mappings":"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","file":"main-ed04862fc3.js","sourcesContent":["window.middleware = (function () {\n\n    var firebaseConfig = { // Configuracion firebase\n        apiKey: \"AIzaSyDcBhhiu-dQXWaGBLcTEtnz8HPnelfXuA4\",\n        authDomain: \"covid19-autotest.firebaseapp.com\",\n        databaseURL: \"https://covid19-autotest.firebaseio.com\",\n        projectId: \"covid19-autotest\",\n        storageBucket: \"covid19-autotest.appspot.com\",\n        messagingSenderId: \"541298094681\",\n        appId: \"1:541298094681:web:a715a3322843f6ff7e7748\",\n        measurementId: \"G-0YZX1RVB1F\"\n    };\n\n    var DEBUG = true; // Version debugging\n\n    var public = {}; // Metodos y atributos publicos\n\n    public.init = function () { // Inicializacion del middleware. Descarga de configuracion\n        return new Promise(function (fulfill, reject) {\n            try {\n                firebase.initializeApp(firebaseConfig);\n\n                firebase.auth().onAuthStateChanged(function (user) { // Escuchar cambios de logeo de usuario\n                    if (user) // El usuario esta logeado\n                        public.users.onUserSignedIn(user.uid); // Pasar uid a los callbacks\n                    else // Si cerro sesión, se llama al callback\n                        public.users.onUserSignedOut();\n                });\n\n                return fulfill();\n            } catch (e) {\n                return reject(e);\n            }\n        });\n    };\n\n    return public;\n})();","(function (public) { // Extension de funciones middleware: auth\n\n    public.users = {}; // Metodos de autenticacion\n\n    public.users.onUserSignedIn = function (uid) { // Overridable - inicio de sesion\n        console.log(\"default -- logged in \" + uid);\n    };\n\n    public.users.onUserSignedOut = function () { // Overridable - cierre de sesion\n        console.log(\"default -- logged out\");\n    };\n\n    public.users.signIn = function (form) { // Iniciar sesión\n        return new Promise(function (fulfill, reject) {\n            firebase.auth().signInWithEmailAndPassword(form.email, form.password)\n                .catch(function (error) {\n                    var errorCode = error.code,\n                        errorMessage;\n                    switch (errorCode) {\n                        case 'auth/wrong-password':\n                            errorMessage = \"La contraseña es incorrecta.\";\n                            break;\n                        case 'auth/user-disabled':\n                            errorMessage = \"El usuario se haya inhabilitado momentáneamente.\";\n                            break;\n                        case 'auth/invalid-email':\n                            errorMessage = \"El email no es válido. Quizá esté mal escrito o no exista.\";\n                            break;\n                        case 'auth/user-not-found':\n                            errorMessage = \"El usuario no existe.\";\n                            break;\n                        default:\n                            errorMessage = \"Algo pasó.. revisa tu conexión a internet e intentálo nuevamente.\";\n                            break;\n                    }\n                    return reject([errorCode, errorMessage]);\n                })\n                .then(function (result) {\n                    return fulfill(\"Logeado correctamente.\");\n                });\n        });\n    };\n\n    public.users.signOut = function () {\n        return new Promise(function (fulfill, reject) {\n            firebase.auth().signOut()\n                .then(function () {\n                    return fulfill(\"Ha salido de la aplicación.\");\n                })\n                .catch(function (error) {\n                    return reject([error, \"Algo pasó.. intentálo nuevamente.\"]);\n                });\n        });\n    };\n\n    public.users.signUp = function (form) { // Registrarse como nuevo usuario\n        return new Promise(function (fulfill, reject) {\n            firebase.auth().createUserWithEmailAndPassword(form.email, form.password)\n                .catch(function (error) {\n                    var errorCode = error.code,\n                        errorMessage;\n                    switch (errorCode) {\n                        case 'auth/weak-password':\n                            errorMessage = \"La contraseña es demasiado débil. Intenta con una más segura.\";\n                            break;\n                        case 'auth/email-already-in-use':\n                            errorMessage = \"Éste email ya existe en nuestra base de datos.\";\n                            break;\n                        case 'auth/invalid-email':\n                            errorMessage = \"El email no es válido. Revisa lo ingresado.\";\n                            break;\n                        case 'auth/operation-not-allowed':\n                            errorMessage = \"No se puede crear la cuenta para ese usuario. Ponete en contacto con los administradores.\";\n                            break;\n                        default:\n                            errorMessage = \"Algo pasó... revisa tu conexión a internet e intentálo nuevamente.\";\n                            break;\n                    }\n                    return reject([errorCode, errorMessage]);\n                })\n                .then(function (result) {\n                    fullfill(result); // Registro exitoso, result.user.uid tiene el id generado para ese usuario\n                });\n        });\n    };\n\n    public.users.resetPwd = function (email) { // Restablecer contrasenia\n        return new Promise(function (fulfill, reject) {\n            firebase.auth().sendPasswordResetEmail(email)\n                .then(function () {\n                    return fulfill(\"Listo. Revisa tu correo electrónico.\");\n                })\n                .catch(function (error) {\n                    return reject([error, \"Algo pasó.. intentálo nuevamente.\"]);\n                });\n        });\n    };\n    \n})(middleware)","(function (public) { // Extension de funciones middleware: realtime database\n\n    public.db = {}; // Metodos de realtime database\n\n    public.db.listen = function (path, callback_success, callback_error) { // Escuchar cambios\n        firebase.database().ref(path).on('value',\n            function (snapshot) {\n                callback_success(snapshot.val(), snapshot.key);\n            },\n            function (error) {\n                callback_error(error);\n            });\n    };\n\n    public.db.listenChild = function(path, child, value, callback_success, callback_error) { // Escucha cambios con filtro\n        firebase.database().ref(path).orderByChild(child).equalTo(value).on('child_added',\n            function (snapshot) {\n                callback_success(snapshot.val(), snapshot.key);\n            },\n            function (error) {\n                callback_error(error);\n            });\n    };\n\n    public.db.stopListener = function(path){ // Detener escuchador\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).off()\n                .then(function () {\n                    return fulfill();\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.get = function (path) { // Descargar tabla de la db\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).once('value')\n                .then(function (snapshot) {\n                    return fulfill(snapshot.val());\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.getSorted = function (path, key) { // Obtener lista ordenada por key\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).orderByChild(key).once('value')\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.getSortedLimited = function (path, key, limit) { // Obtener lista ordenada por key y con limite de entradas\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).orderByChild(key).limitToLast(limit).once('value')\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.query = function(path, key, value) { // Consulta por valor\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).orderByChild(key).equalTo(value).once('value')\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.set = function (data, path) { // Actualizar entrada de la db\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).set(data)\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.update = function (data, path) { // Actualizar entrada de la db\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).update(data)\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.push = function (data, path) { // Nueva entrada (retorna id)\n        return new Promise(function (fulfill, reject) {\n            firebase.database().ref(path).push(data)\n                .then(function (snapshot) {\n                    return fulfill(snapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.db.pushMultiple = function (dataArray, path) { // Subir multiples entradas a un mismo directorio\n        return new Promise(function (fulfill, reject) {\n            var job = [];\n            for (var k in dataArray) // Para cada objeto \n                job.push(firebase.database().ref(path).push(dataArray[k])); // TODO: usar multiples paths \n            Promise.all(job) // Ejecutar promise\n                .then(function (snapshot) { // Snapshot es un array que contiene los keys (snapshot[k].key)\n                    return fulfill(snapshot); // Del otro lado se puede hacer un for para retornar\n                })\n                .catch(function (error) { // Ver si retorna un solo error o varios\n                    return reject(error);\n                });\n        });\n    };\n\n})(middleware);","(function(public){ // Extension de funciones middleware: firestore\n\n    public.fs = {}; // Metodos de firestore\n\n    public.fs.add = function (data, collection) { // Agregar un documento a la collection\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).add(data)\n                .then(function (docRef) {\n                    return fulfill(docRef); // docRef.id tiene el id del document cargado\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.set = function (data, collection, document) { // Asignar objeto al document de una collection\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).doc(document).set(data)\n                .then(function () {\n                    return fulfill();\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.update = function(data, collection, document) { // Actualizar datos existentes\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).doc(document).update(data)\n                .then(function () {\n                    return fulfill();\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.delete = function(collection, document) { // Actualizar datos existentes\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).doc(document).delete()\n                .then(function () {\n                    return fulfill();\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.getCollection = function (collection) { // Descargar collection\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).get()\n                .then(function (querySnapshot) {\n                    return fulfill(querySnapshot);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.getDocument = function(collection,document){\n        return new Promise(function (fulfill, reject) {\n            firebase.firestore().collection(collection).doc(document).get()\n                .then(function (querySnapshot) {\n                    var data = querySnapshot.data();\n                    data.key = querySnapshot.id;\n                    return fulfill(data);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n\n    ///// Consultas //////\n    // Los resultados retornan como arrays y las claves van como atributo \"key\" de cada elemento\n\n    public.fs.query = function (collection, key, operator, value, limit) { // Consulta por campos de documents\n        return new Promise(function (fulfill, reject) {\n            var result = [];\n            var theQuery;\n            if(limit)\n                theQuery = firebase.firestore().collection(collection).where(key, operator, value).limit(limit);\n            else\n                theQuery = firebase.firestore().collection(collection).where(key, operator, value);\n            \n            theQuery.get()\n                .then(function (querySnapshot) {\n                    querySnapshot.forEach(function (doc) {\n                        var data = doc.data();\n                        data.key = doc.id;\n                        result.push(data);\n                    });\n                    return fulfill(result);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.querySortedLimited = function (collection, key, operator, value, orderBy, limit) { // Consulta por campos de documents\n        return new Promise(function (fulfill, reject) {\n            var result = [];\n            firebase.firestore().collection(collection).where(key, operator, value).orderBy(orderBy, \"desc\").limit(limit).get()\n                .then(function (querySnapshot) {\n                    querySnapshot.forEach(function (doc) {\n                        var data = doc.data();\n                        data.key = doc.id;\n                        result.push(data);\n                    });\n                    return fulfill(result);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    public.fs.queryMultipleLimited = function(collection, keys, operators, values, limit){\n        return new Promise(function (fulfill, reject) {\n            var result = [];\n            var col = firebase.firestore().collection(collection);\n            for(var k in keys) // Concatenar multiples filtros\n                col = col.where(keys[k], operators[k], values[k])\n            col.limit(limit).get()\n                .then(function (querySnapshot) {\n                    querySnapshot.forEach(function (doc) {\n                        var data = doc.data();\n                        data.key = doc.id;\n                        result.push(data);\n                    });\n                    return fulfill(result);\n                })\n                .catch(function (error) {\n                    return reject(error);\n                });\n        });\n    };\n    \n})(middleware)","var app = angular.module('autotest-admin', ['ngRoute', 'ngSanitize'])\n    .run([\"$rootScope\", \"$location\", function ($rootScope, $location) {\n\n        $rootScope.userLogged = false;\n        $rootScope.loading = true;\n\n        middleware.init();\n\n        $location.path('/login');\n\n        middleware.users.onUserSignedIn = function (uid) { // Callback usuario logeado\n            // Descargar configuracion actual\n            middleware.db.get(\"config\")\n                .then(function (configData) {\n\n                    $rootScope.config = configData;\n                    $rootScope.config.trees = [];\n\n                    // Arbol de decisiones en entrada aparte (y descarga por timestamp)\n                    middleware.db.getSorted(\"decisionTrees\", \"timestamp\")\n                        .then(function (snapshot) {\n                            snapshot.forEach(function (tree) {\n                                var t = tree.val();\n                                t.key = tree.key;\n                                //t.editable = false; // Ningun arbol de la base de datos puede ser editado\n                                $rootScope.config.trees.push(t);\n                            });\n                            // Ir al tablero\n                            $rootScope.userLogged = true;\n                            $rootScope.loading = false;\n                            $location.path('/');\n                            $rootScope.$apply();\n                        })\n                        .catch(function (err2) {\n                            console.log(err2);\n                            toastr.error(\"Ocurrió un error al descargar la configuración global.\");\n                            $rootScope.loading = false;\n                            $scope.$apply();\n                        });\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    toastr.error(\"Ocurrió un error al descargar la configuración global.\");\n                    $rootScope.loading = false;\n                    $scope.$apply();\n                });\n        };\n\n        middleware.users.onUserSignedOut = function () { // Callback usuario deslogeado\n            $rootScope.userLogged = false;\n            $rootScope.loading = false;\n            $location.path('/login');\n            $rootScope.$apply();\n        };\n\n        $rootScope.logout = function () {\n            $rootScope.loading = true;\n            middleware.users.signOut();\n        };\n\n\n        // Utils\n        $rootScope.getTime = function (stamp, format) { // Para ejecutar moment en view\n            var time;\n            if (!format) format = 3;\n            if (!stamp) format = 1;\n            switch (format) {\n                case 0: // Estampa de tiempo en view\n                    time = Date.now();\n                    break;\n                case 1: // Fecha y hora actual\n                    time = moment(Date.now()).format(\"DD/MM/YYYY HH:mm\");\n                    break;\n                case 2: // Solo fecha actual\n                    time = moment(Date.now()).format(\"DD/MM/YYYY\");\n                    break;\n                case 3: // Fecha y hora de argumento\n                    time = moment(stamp).format(\"DD/MM/YYYY HH:mm\");\n                    break;\n                case 4: // Solo fecha de argumento\n                    time = moment(stamp).format(\"DD/MM/YYYY\");\n                    break;\n                case 5: // Relativo al actual\n                    time = moment(stamp).fromNow();\n                    break;\n                case 6: // Fecha corta y hora\n                    time = moment(stamp).format(\"DD/MM HH:mm\");\n                    break;\n                default:\n                    time = null;\n            }\n            return time;\n        };\n\n        $rootScope.html2Text = function (content) { // Convierte contenido html en texto plano\n            var temp = document.createElement(\"div\");\n            temp.innerHTML = content;\n            return temp.textContent || temp.innerText || \"\";\n        };\n\n        $rootScope.generateID = function(n){\n            /**  https://gist.github.com/gordonbrander/2230317\n            * Math.random should be unique because of its seeding algorithm.\n            * Convert it to base 36 (numbers + letters), and grab the first n characters\n            * after the decimal.\n            */\n            return Math.random().toString(36).substr(2, n);\n        };\n\n        $rootScope.showHelp = function (ref) { // Ayuda en pantalla\n            switch (ref) {\n                case \"main-config\":\n                    $rootScope.helpContent = \"<p>Configure los parámetros de funcionamiento de la aplicación y presione \\\"Guardar\\\" para que la configuración tome efecto o \\\"Descartar\\\" para reestablecer los cambios a los valores activos.</p>\";\n                    break;\n                case \"map\":\n                    $rootScope.helpContent = \"<p>El mapa muestra el area de interés. Para modificar esta zona, pulse sobre el mapa y luego indique el radio del área.</p>\";\n                    break;\n                case \"log-limit\":\n                    $rootScope.helpContent = \"<p>Configure la cantidad de veces que un mismo usuario puede realizar el autotest y el tiempo que debe transcurrir entre cada resultado registrado en la base de datos</p>\";\n                    break;\n                case \"tree-list\":\n                    $rootScope.helpContent = \"<p>La lista muestra todos los árboles de decisión que fueron creados. Sólo un árbol por vez puede estar activo y una vez que se cargan los árboles a la base de datos ya no pueden volver a ser modificados.</p><p>Los nuevos árboles creados pueden modificarse múltiples veces antes de ser habilitados como <b>\\\"activo\\\"</b>.</p>\";\n                    break;\n                case \"ages-plot\":\n                    $rootScope.helpContent = \"<p>El gráfico de barras muestra un histograma de edades de los usuarios. Sólo se contabiliza la edad luego del registro del primer resultado. Los rangos de edad del histograma se crean a medida que aparecen registros correspondientes a dichos intervalos.</p>\";\n                    break;\n                case \"genders-plot\":\n                    $rootScope.helpContent = \"<p>El gráfico circular muestra la proporción de usuarios por género. Sólo se contabiliza el género seleccionado luego del registro del primer resultado.</p>\";\n                    break;\n                case \"exitCodes-plot\":\n                    $rootScope.helpContent = \"<p>Cada opción de cada nodo del árbol de decisiones puede tener asociado un código de salida. Cada vez que el usuario selecciona dicha opción del menú, se contabiliza el código de salida correspondiente. El significado de cada código de salida es definido por el administrador al momento de diseñar el árbol de decisiones.</p>\";\n                    break;\n                case \"paths-plot\":\n                    $rootScope.helpContent = \"<p>El gráfico permite visualizar el árbol de decisiones actual donde el espesor de cada camino es proporcional a la cantidad de veces que un usuario pasó por ese camino.</p>\";\n                    break;\n                case \"tree-container\":\n                    $rootScope.helpContent = \"<p>El gráfico permite visualizar el árbol de decisiones activo. Puede arrastrar los nodos, desplazar la vista o hacer zoom.</p><p>Con el botón <i class='material-icons'>phone_android</i> de la derecha puede simular el comportamiento del arbol activo.</p>\";\n                    break;\n                default:\n                    $rootScope.helpContent = \"No se encontro la referencia\";\n                    break;\n            }\n            $(\"#help-modal\").modal('show');\n        }\n    }])\n    .config([\"$routeProvider\", function ($routeProvider) {\n        $routeProvider\n            .when(\"/dashboard\", {\n                templateUrl: \"views/dashboard.html\",\n                controller: \"dashboard\"\n            })\n            .when(\"/login\", {\n                templateUrl: \"views/login.html\",\n                controller: \"login\"\n            })\n            .when(\"/\", {\n                templateUrl: \"views/config.html\",\n                controller: \"config\"\n            });\n    }])\n    .filter('trusted', ['$sce', function ($sce) {\n        // Ver: https://stackoverflow.com/questions/39480969/angular-interpolateinterr-error-when-adding-url-from-variable\n        return $sce.trustAsResourceUrl;\n    }]);","app.controller(\"login\", ['$scope', '$rootScope', function ($scope, $rootScope) {\n    \n    $scope.login = function(){\n\n        if(!$scope.form){\n            toastr.error(\"Complete los campos de credenciales!\");\n            return;\n        }\n\n        if(!$scope.form.email){\n            toastr.error(\"Indique su usuario!\");\n            return;\n        }\n\n        if(!$scope.form.password){\n            toastr.error(\"Ingrese su contraseña!\");\n            return;\n        }\n\n        $rootScope.loading = true;\n        middleware.users.signIn($scope.form)\n        .then(function(res){\n            toastr.success(\"Bienvenido!\");\n        })\n        .catch(function(err){\n            console.log(err);\n            toastr.error(err[1]);\n            $rootScope.loading = false;\n            $scope.$apply();\n        });\n    };\n\n    $scope.retrievePassword = function(){\n        toastr.info(\"Pronto contaremos con esa funcionalidad.\");\n    };\n    \n}]);","app.controller(\"dashboard\", ['$scope', '$rootScope', '$location', function ($scope, $rootScope, $location) {\n\n    if (!$rootScope.userLogged) {\n        $location.path('/login');\n    }\n\n    var updateAgePlot = function () { // Grafico de barras con histograma de edades\n\n        var labels = [];\n        var data = [];\n        var colors = [];\n        var grIncr = Math.floor(200 / Object.getOwnPropertyNames($rootScope.stats.ages).length); // Incremento de color de cada barra\n        var gray = 5;\n        for (var k in $rootScope.stats.ages) {\n            var startAge = parseInt(k.split('_')[1]) * 10;\n            var endAge = startAge + 9;\n            labels.push(startAge + \"-\" + endAge);\n            data.push($rootScope.stats.ages[k]);\n            colors.push(\"rgba(\" + gray + \",\" + gray + \",\" + gray + \",0.9)\");\n            gray += grIncr;\n        }\n\n        if ($scope.agesChart)\n            $scope.agesChart.destroy();\n        $scope.agesChart = new Chart(document.getElementById(\"age-chart\"), {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: \"Usuarios por edad\",\n                    backgroundColor: colors,\n                    data: data,\n                }]\n            },\n            options: {\n                maintainAspectRatio: false,\n                scales: { // Para comenzar en 0\n                    yAxes: [{\n                        display: true,\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }]\n                }\n            }\n        });\n    };\n\n    var updateGenderPlot = function () { // Grafico de torta de porcentajes de generos\n        if ($scope.genderChart)\n            $scope.genderChart.destroy();\n        $scope.genderChart = new Chart(document.getElementById(\"gender-chart\"), {\n            type: 'doughnut',\n            data: {\n                labels: [\"Masculino\", \"Femenino\", \"Otro\"],\n                datasets: [{\n                    backgroundColor: [\"#333333\", \"#777777\", \"#AAAAAA\"],\n                    pointRadius: 0,\n                    data: [$rootScope.stats.genders.m, $rootScope.stats.genders.f, $rootScope.stats.genders.n],\n                }]\n            },\n            options: {\n                maintainAspectRatio: true\n            }\n        });\n    };\n\n    var updaterResultPlot = function () { // Grafico de código de resultados\n        \n        var labels = [];\n        var data = [];\n        var colors = [];\n        var grIncr = Math.floor(200 / Object.getOwnPropertyNames($rootScope.stats.exitCodes).length); // Incremento de color de cada barra\n        var gray = 5;\n        for (var k in $rootScope.stats.exitCodes) {\n            labels.push(k);\n            data.push($rootScope.stats.exitCodes[k]);\n            colors.push(\"rgba(\" + gray + \",\" + gray + \",\" + gray + \",0.9)\");\n            gray += grIncr;\n        }\n\n        if ($scope.exitCodeChart)\n            $scope.exitCodeChart.destroy();\n        $scope.exitCodeChart = new Chart(document.getElementById(\"exitCode-chart\"), {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: \"Código de resultado\",\n                    backgroundColor: colors,\n                    data: data,\n                }]\n            },\n            options: {\n                maintainAspectRatio: true,\n                scales: { // Comenzar en 0\n                    yAxes: [{\n                        display: true,\n                        ticks: {\n                            beginAtZero: true \n                        }\n                    }]\n                }\n            }\n        });\n    };\n\n    var updatePathsPlot = function () { // Grafico de sankey de interacciones de usuarios\n\n        // Determinar modelo activo\n        var treeData = $rootScope.config.trees.find(function (el) {\n            return el.active\n        });\n        var tree = treeData.tree;\n\n        // Crear objeto de pesos de enlaces\n        var weights = [];\n        var maxWeight = 0; // Para normalizar los valores\n\n        for (var k in $rootScope.pathStats[treeData.id]) { // Para cada string que codifica el camino computado\n            var p = k.split('_'); // [\"P\", desde, hacia, camino]\n            var from = parseInt(p[1]);\n            var to = parseInt(p[2]);\n            var index = parseInt(p[3]);\n            weights[from] = []; // Crear array de nodos destino vacio\n            weights[from][to] = []; // Crear array de caminos para llegar a destino\n            weights[from][to][index] = $rootScope.pathStats[treeData.id][k]; // Asignar peso del enlace\n            if($rootScope.pathStats[treeData.id][k] > maxWeight) // Calcular maximo\n                maxWeight = $rootScope.pathStats[treeData.id][k];\n        }\n\n        if(maxWeight == 0) maxWeight = 1;\n\n        var nodes = [];\n        var edges = [];\n\n        for (var k = 0; k < tree.length; k++) { // Para cada nodo del arbol, crear nodo de grafo\n            var nodeTitle = tree[k].header.substring(0, 15)+\"-\\n\"+tree[k].header.substring(15, 30)+\"-\\n\"+tree[k].header.substring(30, 50);\n            nodes.push({\n                id: k,\n                value: 1,\n                label: \"[\" + k + \"] -- \" + $rootScope.html2Text(nodeTitle) + \"...\", // Titulo recortado\n                shape: \"box\",\n                font: {\n                    size: 12,\n                    color: \"white\",\n                    face: \"arial\"\n                },\n                color: \"#444444\" // Gris oscuro\n            });\n            for (var j = 0; j < tree[k].options.length; j++) { // Para cada enlace (los enlaces externos no se grafican)\n                switch(tree[k].options[j].type){\n                    case \"goto\": // Enlace a otro nodo\n                        var w = 0; // Peso del enlace defecto\n                        var lbl = $rootScope.html2Text(tree[k].options[j].text).substring(0, 10) + \n                                (tree[k].options[j].text.length > 10 ? \"...\" : \"\") + \"\\n(0)\"; // Etiqueta defecto\n\n                        if(weights[k]){\n                            if(weights[k][tree[k].options[j].goto]){\n                                if(weights[k][tree[k].options[j].goto][j]){ // Si hay camino computado, incrementar value\n                                    w = weights[k][tree[k].options[j].goto][j];\n                                    lbl = $rootScope.html2Text(tree[k].options[j].text).substring(0, 10) + \n                                        (tree[k].options[j].text.length > 10 ? \"...\" : \"\") + \"\\n(\" + w + \")\";\n                                }\n                            }\n                        }\n\n                        edges.push({\n                            from: k,\n                            to: tree[k].options[j].goto,\n                            smooth: {\n                                type: 'curvedCW',\n                                roundness: Math.random() - 0.5\n                            },\n                            value: Math.round(w/maxWeight*10),\n                            label: lbl\n                        });\n                        break;\n                    case \"link\": // Enlace externo\n                        var newId = $rootScope.generateID(20); // Identificador unico\n                        nodes.push({ // Crear un nodo para mostrar el punto de finalizacion\n                            id: newId,\n                            value: 1,\n                            label: tree[k].options[j].text.substring(0, 8)+\"...\" || \"S/L\",\n                            shape: \"circle\",\n                            font: {\n                                size: 12,\n                                color: \"white\",\n                                face: \"arial\"\n                            },\n                            color: \"#AAAAAA\" // Gris claro\n                        });\n                        edges.push({ // Crear el enlace al nodo de salida\n                            from: k,\n                            to: newId,\n                            smooth: {\n                                type: 'curvedCW',\n                                roundness: Math.random() - 0.5\n                            },\n                            value: 0,\n                            label: \"Enlace ext.\"\n                        });\n                        break;\n                    case 'decision': // Enlaces a cada una de las salidas\n                        const l = tree[k].options[j].decision.split(','); // Lista de nodos destino\n                        var rndss = -0.5; const rndIncr = 1/l.length; // Para roundess incremental\n                        var padd = Math.log(l.length) / Math.log(2); // Cantidad de digitos codigo binario de seleccion\n                        for(var ind = 0; ind < l.length; ind++){ // Para cada nodo destino\n                            \n                            var w = 0; // Peso del enlace defecto\n                            var lbl = (parseInt(ind)).toString(2).padStart(padd, \"0\") + \"\\n(0)\"; // Etiqueta defecto\n                            \n                            if(weights[k]){\n                                if(weights[k][parseInt(l[ind])]){\n                                    if(weights[k][parseInt(l[ind])][ind]){ // Si hay camino computado, incrementar value\n                                        w = weights[k][parseInt(l[ind])][ind];\n                                        lbl = (parseInt(ind)).toString(2).padStart(padd, \"0\") + \"\\n(\" + w + \")\";\n                                    }\n                                }\n                            }\n                            \n                            edges.push({\n                                from: k,\n                                to: parseInt(l[ind]),\n                                smooth: {\n                                    type: 'curvedCW',\n                                    roundness: rndss\n                                },\n                                value: Math.round(w/maxWeight*10),\n                                label: lbl\n                            });\n                            rndss += rndIncr;\n                        }\n                        break;\n                    case \"exit\": // Salida y reporte\n                        var newId = $rootScope.generateID(20); // Identificador unico\n                        nodes.push({ // Crear un nodo para mostrar el punto de finalizacion\n                            id: newId,\n                            value: 1,\n                            label: tree[k].options[j].exitCode || \"S/C\",\n                            shape: \"circle\",\n                            font: {\n                                size: 12,\n                                color: \"white\",\n                                face: \"arial\"\n                            },\n                            color: \"#AA0000\" // Rojo oscuro\n                        });\n                        edges.push({ // Crear el enlace al nodo de salida\n                            from: k,\n                            to: newId,\n                            smooth: {\n                                type: 'curvedCW',\n                                roundness: Math.random() - 0.5\n                            },\n                            value: 0,\n                            label: \"Cód. de salida\"\n                        });\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        var data = {\n            nodes: new vis.DataSet(nodes),\n            edges: new vis.DataSet(edges)\n        };\n        console.log(data);\n        var options = {\n            layout: {\n                hierarchical: {\n                    direction: \"UD\",\n                    sortMethod: \"directed\"\n                }\n            },\n            physics:false,\n            edges: {\n                font: {\n                    size: 10,\n                    color: \"black\",\n                    face: \"arial\",\n                    align: 'top'\n                },\n                arrows: {\n                    to: {\n                        enabled: true,\n                        scaleFactor: 1\n                    }\n                }\n            },\n            nodes: {\n                shape: 'box'\n            }\n        };\n\n        var network = new vis.Network(document.getElementById('paths-container'), data, options);\n    };\n\n\n    $scope.updateStats = function () { // Las stats se descargan al acceder a este controller por unica vez durante el uso de la app\n        $rootScope.loading = true;\n        middleware.fs.getCollection(\"stats\")\n            .then(function (snapshot) {\n                $rootScope.stats = {}; // Objeto con contadores\n                snapshot.forEach(function (document) {\n                    $rootScope.stats[document.id] = document.data();\n                });\n\n                updateAgePlot();\n                updaterResultPlot();\n                updateGenderPlot();\n\n                middleware.fs.getCollection(\"pathStats\")\n                    .then(function (snapshot2) {\n                        $rootScope.pathStats = {};\n                        snapshot2.forEach(function (document) {\n                            $rootScope.pathStats[document.id] = document.data();\n                        });\n\n                        updatePathsPlot();\n\n                        $rootScope.loading = false;\n                        $scope.$apply();\n                    })\n                    .catch(function (err2) {\n                        console.log(err2);\n                        $rootScope.loading = false;\n                        $scope.$apply();\n                    });\n            })\n            .catch(function (err) {\n                console.log(err);\n                $rootScope.loading = false;\n                $scope.$apply();\n            });\n    };\n\n\n    if (!$rootScope.stats) // Descargar la 1ra vez\n        $scope.updateStats();\n    else { // Sino, directamente actualizar graficos\n        updateAgePlot();\n        updaterResultPlot();\n        updateGenderPlot();\n        updatePathsPlot();\n    }\n}]);","app.controller(\"config\", ['$scope', '$rootScope', function ($scope, $rootScope) {\n    \n    if(!$rootScope.userLogged){\n        $location.path('/login');\n    }\n    \n    // Iniciar mapa leaflet\n    $scope.map = L.map('map',{\n        center: [$rootScope.config.locationFilter.lat, $rootScope.config.locationFilter.lng],\n        zoom: 8,\n    });\n    \n    L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n        id: 'mapbox/streets-v11',\n        accessToken: 'pk.eyJ1IjoibWF0aWFzbWljaGVsZXR0byIsImEiOiJjazVsa2ZtamowZHJnM2ttaXFmZGo1MDhtIn0.8iBO-J1wj34LIqq-e4Me5w'\n    }).addTo($scope.map);\n\n    $scope.map.on('click', function(e){ // Callback de click\n        console.log(e.latlng);\n        $scope.newLocation = e.latlng;\n        $scope.newLocation.range = $scope.tempConfig.locationFilter.range;\n        $scope.$apply();\n        $(\"#location-modal\").modal(\"show\");\n    });\n\n    /*\n    $scope.map.on('locationfound', function (e) { // Callback de posicion GPS actualizada\n        console.log(e);\n    });\n    \n\n    // Mostrar ubicación actual\n    $scope.map.locate({\n        setView: true, // Forzar vista\n        maxZoom: 16 // Zoom\n    });\n    */\n\n    var setupMap = function(){  // Dibujar area de operacion\n        var current_location = { // Crear marcador\n            marker: L.marker($scope.tempConfig.locationFilter),\n            radius: L.circle($scope.tempConfig.locationFilter, $scope.tempConfig.locationFilter.range*1000) // Rango en metros\n        };\n\n        if($scope.markerGroup) $scope.markerGroup.clearLayers(); // Un marcador a la vez\n        \n        $scope.markerGroup = L.layerGroup().addTo($scope.map);\n\n        // Agregar marcador al mapa con su circulo de posicion estimada\n        current_location.marker.addTo($scope.markerGroup).bindPopup(\"Area de acceso a la aplicación\");\n        current_location.radius.addTo($scope.markerGroup);\n        current_location.marker.openPopup();\n    };\n\n    $scope.updateLocationFilter = function(){ // Callback para configurar nueva ubicacion\n        $scope.tempConfig.locationFilter = angular.copy($scope.newLocation);\n        setupMap();\n        toastr.success(\"Espacio de operación actualizado\");\n        $(\"#location-modal\").modal(\"hide\");\n    };\n\n\n    var updateTreePlot = function () { // Grafico de caminos recorridos\n        \n        var treeData = $scope.tempConfig.trees.find(function(el){return el.active});\n        var tree = treeData.tree;\n        \n        var nodes = [];\n        var edges = [];\n\n        for (var k in tree) { // Crear cada nodo del arbol\n            var nodeTitle = tree[k].header.substring(0, 15)+\"-\\n\"+tree[k].header.substring(15, 30)+\"-\\n\"+tree[k].header.substring(30, 50);\n            nodes.push({\n                id: k,\n                value: 1,\n                label: \"[\"+k+\"] -- \"+ $rootScope.html2Text(nodeTitle)+\"...\",\n                shape:\"box\",\n                font: { \n                    size: 12, \n                    color: \"white\", \n                    face: \"arial\"\n                },\n                color: \"#444444\" // Gris oscuro\n            });\n            for (var j in tree[k].options) { // Crear enlaces de cada opcion\n                switch(tree[k].options[j].type){\n                    case 'goto': // Solo un enlace al siguiente nodo\n                        edges.push({\n                            from: k,\n                            to: tree[k].options[j].goto,\n                            smooth: {\n                                type: 'curvedCW',\n                                roundness: Math.random() - 0.5\n                            },\n                            label: $rootScope.html2Text(tree[k].options[j].text).substring(0, 10) + (tree[k].options[j].text.length > 10 ? \"...\" : \"\")\n                        });\n                        break;\n                    case 'link': // Enlace a un circulo que representa el link\n                        var newId = $rootScope.generateID(20); // Identificador unico\n                        nodes.push({ // Crear un nodo para mostrar el enlace externo\n                            id: newId,\n                            label: tree[k].options[j].text.substring(0, 8)+\"...\" || \"S/L\",\n                            shape: \"circle\",\n                            font: {\n                                size: 12,\n                                color: \"white\",\n                                face: \"arial\"\n                            },\n                            color: \"#AAAAAA\" // Gris claro\n                        });\n                        edges.push({ // Crear el enlace al nodo de salida\n                            from: k,\n                            to: newId,\n                            smooth: {\n                                type: 'curvedCW',\n                                roundness: Math.random() - 0.5\n                            },\n                            label: \"Enlace ext.\"\n                        });\n                        break;\n                    case 'decision': // Enlaces a cada una de las salidas\n                        const l = tree[k].options[j].decision.split(',');\n                        var rndss = -0.5; const rndIncr = 1/l.length; // Para roundess incremental\n                        var padding = Math.log(l.length) / Math.log(2); // Cantidad de digitos codigo binario de seleccion\n                        for(var ind = 0; ind < l.length; ind++){ // Para cada posible seleccion\n                            edges.push({\n                                from: k,\n                                to: parseInt(l[ind]),\n                                smooth: {\n                                    type: 'curvedCW',\n                                    roundness: rndss\n                                },\n                                label: (ind).toString(2).padStart( padding,\"0\") // (codigo binario)\n                            });\n                            rndss += rndIncr;\n                        }\n                        break;\n                    case 'exit': // Enlace a circulo rojo con codigo de finalizacion\n                        var newId = $rootScope.generateID(20); // Identificador unico\n                        nodes.push({ // Crear un nodo para mostrar el punto de finalizacion\n                            id: newId,\n                            label: tree[k].options[j].exitCode || \"S/C\",\n                            shape: \"circle\",\n                            font: {\n                                size: 12,\n                                color: \"white\",\n                                face: \"arial\"\n                            },\n                            color: \"#AA0000\" // Rojo oscuro\n                        });\n                        edges.push({ // Crear el enlace al nodo de salida\n                            from: k,\n                            to: newId,\n                            smooth: {\n                                type: 'curvedCW',\n                                roundness: Math.random() - 0.5\n                            },\n                            label: \"Cód. de salida\"\n                        });\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        var data = {\n            nodes: nodes,\n            edges: edges\n        };\n        console.log(data);\n        var options = {\n            layout: {\n                hierarchical: {\n                  direction: \"UD\",\n                  sortMethod: \"directed\"\n                }\n            },\n            physics: false,\n            edges: {\n                font: {\n                    size: 10,\n                    color: \"black\",\n                    face: \"arial\",\n                    align: 'top'\n                },\n                arrows: {\n                    to: {\n                        enabled: true,\n                        scaleFactor: 1\n                    }\n                }\n            },\n            nodes: {\n                shape: 'box'\n            }\n        };\n        // Hacer destroy para actualizar?\n        var network = new vis.Network(document.getElementById('tree-container'), data, options);\n    };\n\n    $scope.newTree = function(){ // Crear un nuevo arbol vacio\n        var newTree = {\n            author: firebase.auth().currentUser.email,\n            id: \"T00\"+($scope.tempConfig.trees.length+1),\n            timestamp: Date.now(),\n            editable: true, // Antes de cargarse a la db como activo, puede ser editado\n            validated: false, // No puede cargarse a la db como activo si no esta validado\n            tree: [{ // Crearlo con un solo nodo\n                header:\"\",\n                content:\"\",\n                options:[] // Sin opciones\n            }]\n        };\n        $scope.tempConfig.trees.push(newTree);\n        toastr.success(\"Nuevo arbol creado\");\n    };\n\n    $scope.copyTree = function(index){ // Crear un nuevo arbol a partir de otro\n        var newTree = {\n            author: firebase.auth().currentUser.email,\n            id: \"T00\"+($scope.tempConfig.trees.length+1),\n            timestamp: Date.now(),\n            editable: true, // Antes de cargarse a la db como activo, puede ser editado\n            validated: false, // No puede cargarse a la db como activo si no esta validado\n            tree: angular.copy($scope.tempConfig.trees[index].tree)\n        };\n        $scope.tempConfig.trees.push(newTree);\n        toastr.success(\"Árbol duplicado\");\n    };\n\n    $scope.deleteTree = function(index){ // Eliminar arbol\n        $scope.tempConfig.trees[index].deleted = true; // Se marca para eliminar luego de la db\n        toastr.info(\"Árbol eliminado\");  \n    };\n\n    $scope.setActiveTree = function(index){ // Configurar arbol de la lista como activo\n        for(var k in $scope.tempConfig.trees){\n            if(k == index)\n                $scope.tempConfig.trees[k].active = true;\n            else\n                $scope.tempConfig.trees[k].active = false;\n        }\n        updateTreePlot();\n    };\n\n    $scope.editTree = function(index){ // Editar un arbol recientemente creado\n        $scope.editingIndex = index; // Tomar indice para mostrar arbol en la vista\n        $scope.tempConfig.trees[$scope.editingIndex].validated = false; // Indicar que no esta validado aun\n        $(\"#tree-edit-modal\").modal(\"show\");\n    };\n\n    $scope.cancelEdition = function(){ // Salir del editor. El arbol editado no se verifica por lo que pueden quedar lazos o sin condicion de salida.\n        toastr.info(\"Arbol no verificado! No guarde la configuración actual.\");\n        $(\"#tree-edit-modal\").modal(\"hide\");\n    };\n\n    $scope.validateTree = function(){ // Verifica el arbol creado: busca lazos infinitos y reconfigura modelo\n\n        var tree = $scope.tempConfig.trees[$scope.editingIndex].tree;\n        \n        // Validar menues con selectores\n        for(var k in tree){\n            var toggleCntr = 0; // Contador de selectores por nodo\n            var exprs = []; // Lista de expresiones por nodo\n            for(var j in tree[k].options){ // Contar selectores y guardar expresiones\n                if(tree[k].options[j].type==\"toggle\")\n                    toggleCntr++;\n                if(tree[k].options[j].type==\"decision\"){\n                    if(!tree[k].options[j].decision){ // Una de las expresiones no esta definida\n                        toastr.error(\"Falta definir expresiones en el nodo \"+k);\n                        return;        \n                    }\n                    exprs.push(tree[k].options[j].decision);\n                }\n            }\n            //\n            if(toggleCntr > 0 && exprs.length == 0){ // Si hay selectores pero no hay expresiones\n                toastr.error(\"No hay opciones de decisión para los selectores del nodo \"+k);\n                return;\n            }\n            for(var j in exprs){\n                var exprLen = exprs[j].split(\",\").length;\n                if(exprLen != Math.pow(2,toggleCntr)){\n                    toastr.error(\"El nodo \"+k+\" tiene \"+toggleCntr+\" selectores, pero la lista de indices tiene \"+exprLen+\" indices\");\n                    return;\n                }\n            }\n        }\n\n        // Evaluar modelo para buscar lazos infinitos o nodos sin salida\n        var goToNode = function(index){ // Recorrer todo el arbol\n            var exit = false; // Indica si se encuentra opcion de salida en el nodo actual\n            for(var k in tree[index].options){ // Para cada enlace del nodo actual\n                if(tree[index].options[k].type==\"goto\"){ // Enlace a otro nodo\n                    exit = true; // Si puede saltar a otro nodo, hay salida\n                    var status = goToNode(tree[index].options[k].goto); // Evaluar ese nodo\n                    if(status != \"ok\") // Si ya se detecto error\n                        return status; // Retornar por backtrack\n                }\n                if(tree[index].options[k].type==\"decision\"){\n                    var nodeList = tree[index].options[k].decision.split(','); // Lista de enlaces\n                    exit = true; // Suponer que puede ir a otro nodo\n                    for(var j in nodeList){\n                        var status = goToNode(nodeList[j]); // Evaluar ese nodo\n                        if(status != \"ok\") // Si ya se detecto error\n                            return status; // Retornar por backtrack       \n                    }\n                }\n                if(tree[index].options[k].type==\"exit\" && tree[index].options[k].exitCode) // Opcion de salida\n                    exit = true; // Este nodo tiene al menos una condicion de salida\n            }\n            if(!exit) return \"exit\"; // Si ningun nodo permite salir o pasar a otro nodo, es arbol sin salida\n            return \"ok\";\n        }\n    \n        var status;\n        try{ // Si hay lazos sin salida, se llena el stack\n            status = goToNode(0); // Iniciar el recorrido por el nodo 0\n        }catch(e){\n            console.log(e.message);\n            status = \"loop\";\n        }\n    \n        switch(status){\n            case \"exit\":\n                console.log(\"Se detectaron nodos sin salida.\");\n                toastr.error(\"El arbol tiene nodos sin salida\");\n                break;\n            case \"loop\":\n                console.log(\"Se detectaron lazos infinitos.\");\n                toastr.error(\"El arbol tiene lazos infinitos o hay nodos mal referenciados\");\n                break;\n            case \"ok\":\n                console.log(\"Arbol correcto\");\n                toastr.success(\"Arbol correcto\");\n                $scope.tempConfig.trees[$scope.editingIndex].validated = true; // Habilitar activacion\n                $(\"#tree-edit-modal\").modal(\"hide\");\n                break;\n            default:\n                break;\n        }\n\n        updateTreePlot(); // Actualizar la visualizacion\n    };\n\n    $scope.testInDevice = function(){ // Iniciar dispositivo para probar modelo activo\n\n        $scope.activeIndex = $scope.tempConfig.trees.findIndex(function(el){return el.active});\n        $scope.current = $scope.tempConfig.trees[$scope.activeIndex].tree[0];\n\n        $scope.loadMenu = function (index) { // Callback de botones con enlace a sgte nodo\n            if(index > 0){ // Pasar a la siguiente vista\n                if ($scope.tempConfig.trees[$scope.activeIndex].tree[index]){ // Control\n                    $scope.current = $scope.tempConfig.trees[$scope.activeIndex].tree[index];\n                }\n            }\n        };\n\n        $scope.toggleButton = function(index){ // Alterna estado de selectores\n            if(!$scope.current.options[index].checked) // La primera vez es undefined\n                $scope.current.options[index].checked = true;\n            else\n                $scope.current.options[index].checked = false;\n        };\n\n        $scope.evalDecision = function(expr){ // Evalua los toggle seleccionados y decide a cual nodo ir\n\n            // Convertir expresion logica en array (si, cada vez)\n            var gotoArray = expr.split(',');\n            for(var k in gotoArray)\n                gotoArray[k] = parseInt(gotoArray[k]);\n\n            // Generar valor binario de las opciones elegidas\n            var binArray = \"\";\n            for(var k in $scope.current.options)\n                if($scope.current.options[k].type==\"toggle\")\n                    binArray = binArray+($scope.current.options[k].checked ? \"1\":\"0\");\n\n            var index = parseInt(binArray,2); // Convertir a decimal\n\n            $scope.loadMenu(gotoArray[index]); // Ir a la vista correspondiente\n        };\n\n        $scope.exit = function(code){ // Finalizacion del test\n            toastr.info(\"Codigo de finalización: \"+code);\n            $(\"#app-test-modal\").modal(\"hide\");\n        };\n\n        $(\"#app-test-modal\").modal(\"show\");\n    };\n\n    $scope.saveConfig = function(){ // Cuando el admin confirma aplicar la configuracion actual a la base de datos, se sobre escribe toda la configuracion\n\n        // Verificar arboles validados y deshabilitar edicion de los arboles que se publican como activos\n        var forUpdate = {}; // Lista de arboles a actualizar estado\n        var forPush = []; // Lista de arboles a subir\n        var indexList = []; // Lista de indices del arreglo tempConfig.trees de los arboles que se van a subir\n        for(var k in $scope.tempConfig.trees){\n            if($scope.tempConfig.trees[k].active){ // Si se selecciona un arbol como activo\n                if(!$scope.tempConfig.trees[k].validated){ // Intenta activar un arbol no validado\n                    toastr.error(\"El modelo de decisiones que intenta activar no fue validado. Edite el árbol y seleccione 'Validar'\");\n                    $(\"#confirm-modal\").modal(\"hide\");\n                    return;\n                }\n                $scope.tempConfig.trees[k].editable = false; // Deshabilitar la edicion permanentemente\n            }\n            if($scope.tempConfig.trees[k].key && !$scope.tempConfig.trees[k].deleted){ // Los que se borraron no deben actualizarse\n                forUpdate[\"decisionTrees/\"+$scope.tempConfig.trees[k].key+\"/active\"] = $scope.tempConfig.trees[k].active;\n            }else{\n                forPush.push($scope.tempConfig.trees[k]);\n                indexList.push(k);\n            }\n        }\n\n        // La eliminacion de arboles se realiza luego del checkeo anterior\n        var deleteJob = [];\n        for(var k in $scope.tempConfig.trees){\n            if($scope.tempConfig.trees[k].deleted && $scope.tempConfig.trees[k].key){ // Si es un arbol eliminado que estaba guardado\n                deleteJob.push(middleware.db.set(null,\"decisionTrees/\"+$scope.tempConfig.trees[k].key));\n            }\n        }\n\n        // Actualizar configuracion de filtros\n        forUpdate[\"config/locationFilter\"] = $scope.tempConfig.locationFilter;\n        forUpdate[\"config/logLimit\"] = $scope.tempConfig.logLimit;\n        \n        $rootScope.loading = true;\n        Promise.all(deleteJob) // Eliminar arboles si habia marcados\n        .then(function(){\n            middleware.db.update(forUpdate) // Sincronizar estado de los arboles que estaban en db y configuracion de filtros\n                .then(function(){\n                    middleware.db.pushMultiple(forPush,\"decisionTrees\") // Subir los nuevos arboles creados\n                    .then(function(res){\n                        var job = []; // Promesas\n                        for(var k in res){ // Por cada nuevo arbol creado\n                            $scope.tempConfig.trees[indexList[k]].key = res[k].key; // Poner las claves a los arboles por si vuelve a subir cambios\n                            job.push(middleware.fs.set({},\"pathStats\",$scope.tempConfig.trees[indexList[k]].id)); // Crear document para los paths del nuevo arbol\n                        }\n                        Promise.all(job)\n                        .then(function(){\n                            $rootScope.config = angular.copy($scope.tempConfig);\n                            $rootScope.loading = false;\n                            $scope.$apply();\n                            toastr.success(\"La configuración actual fue sincronizada con la base de datos.\")\n                            $(\"#confirm-modal\").modal(\"hide\");            \n                        })\n                        .catch(function(err4){\n                            console.log(err4);\n                            $rootScope.loading = false;\n                            $scope.$apply();\n                            toastr.error(\"Ocurrió un error al crear indicadores del nuevo árbol creado.\");\n                        });\n                    })\n                    .catch(function(err3){\n                        console.log(err3);\n                        $rootScope.loading = false;\n                        $scope.$apply();\n                        toastr.error(\"Ocurrió un error al sincronizar los árboles creados. Vuelva a intentarlo más tarde.\");\n                    });\n                })\n                .catch(function(err2){\n                    console.log(err2);\n                    $rootScope.loading = false;\n                    $scope.$apply();\n                    toastr.error(\"Ocurrió un error al sincronizar árboles activos. Vuelva a intentarlo más tarde.\");\n                });\n            })\n        .catch(function(err){\n            console.log(err);\n            $rootScope.loading = false;\n            $scope.$apply();\n            toastr.error(\"Ocurrió un error al eliminar arboles creados\");\n        });\n    };\n\n    $scope.resetConfig = function(){ // Reestablecer el modelo que se muestra en la vista al de la base de datos\n        $scope.tempConfig = angular.copy($rootScope.config);\n        $scope.elapsedHours = $scope.tempConfig.logLimit.elapsed/3600000; // Convertir de milisegundos a horas\n        setupMap();\n        updateTreePlot();\n    };\n\n    $scope.updateElapsed = function(){ // Callback de cambios en el input del limitador de usos\n        $scope.tempConfig.logLimit.elapsed = $scope.elapsedHours*3600000; // Convertir de horas a milisegundos\n    };\n    \n    $scope.resetConfig();\n}]);"],"sourceRoot":"/source/"}